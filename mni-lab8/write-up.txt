lab8 write-up
By Tongxi(Tom) Liu, Jessie Zeng
Feb 22th, 2022
0. Fix last lab 7:

We fixed the case inheritance of agentive and patient case lex rule to inherit noun-case-lex-rule-super.

        noun-case-agentive-lex-rule := infl-lex-rule & noun-case-lex-rule-super &
          [ SYNSEM.LOCAL.CAT.HEAD.CASE agn ].

        noun-case-patient-lex-rule := infl-lex-rule & noun-case-lex-rule-super &
          [ SYNSEM.LOCAL.CAT.HEAD.CASE pat ].


1. A description of how the phenomenon you picked to work on is expressed in your language, including IGT.

This week we chose to work on sentential negation in Meithei. A general negative suffix -tə is attached to main verb of a sentence.
The negative marker occurs with mood marker -e 'assertive', but never with -i 'nonhypothetical'. Whereas a constant situation or action that does take place is expressed with -i 'nonhypothetical' which refers to general or constant truths, a particular nonoccurrence of an event or state is expressed with -e 'assertive' which refers to particular events.

IGTs:
    húy túm-í
    dog sleep-NHYP
    'Dogs sleep.'

    húy túm-e
    dog sleep-ASRT
    'Dogs sleep.'

    húy túm-tə-e
    dog sleep-NEG-ASRT
    'Dogs don't sleep.'

    húy túm-tə-í
    dog sleep-NEG-ASRT
    '*Dogs don't sleep.'

Another type of negation is the negative copula for non-verbal predicate negation, spelled as =nəttə.
It functions as transitive (mood satisfied) verb just as =ni(=COP).

    má oǰa =ni
    3P teacher =COP
    'He/she is a teacher.'

    má oǰa =nəttə
    3P teacher =NEGCOP
    'He/she is not a teacher.'

    ə́y bəzar=tə =ni
    1P park=LOC =COP
    'I am in the park.'

    ə́y bəzar=tə =nəttə
    1P park=LOC =NEGCOP
    'I am not in the park.'


Different from events or actions, the past or present nonexistence of situations or states are expressed in nominalized form:
IGT:
    ə́y hén čá-pə =ni
    1P fish eat-NOM =COP
    'I am fish eating (person).'

    ə́y hén čá-tə-pə =ni
    1P fish eat-NEG-NOM =COP
    'I am not-eat-fish (person).'

In our analysis, we defined =COP as a mood satisfied transitive verb, so we would want the nominalized VP -> N to be the complement of =COP.


2. Implementation description and tdl:
Verbal Negation IGTs:
    (1)
    húy túm-tə-e
    dog sleep-NEG-ASRT
    'Dogs don't sleep.'
    (2)
    húy túm-tə-í
    dog sleep-NEG-ASRT
    '*Dogs don't sleep.'

We first cleaned up mood definition with following TDLs:
irules.tdl:
    asrt-suffix :=
    %suffix (* -e)

mni.tdl:
    mood-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
                             [ INFLECTED.SENTENCE-MOOD-FLAG +].

    nhyp-mood-lex-rule-super := mood-lex-rule-super &
                                [ DTR nhyp-mood-rule-dtr ].

    nhyp-lex-rule := nhyp-mood-lex-rule-super &
      [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD nhyp-declarative ].

    asrt-mood-lex-rule-super := mood-lex-rule-super &
        [ DTR asrt-mood-rule-dtr  ].

    asrt-lex-rule := asrt-mood-lex-rule-super &
      [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD asrt-assertive ].

To account for example (1) and rule out example (2), we defined nhyp-mood-rule-dtr and asrt-mood-rule-dtr, so we can specify that -tə can only take assertive mood suffix.

Then, we add the negative marker -pə to the grammar:
irules.tdl:
    verb-neg_lrt-suffix :=
    %suffix (* -tə)
    verb-neg_lrt-lex-rule.

mni.tdl:
    verb-neg-rule-dtr := word-or-lexrule.

    verb-neg-lex-rule-super := infl-lex-rule & asrt-mood-rule-dtr & verb-pc3-rule-dtr &
      [ INFLECTED #infl,
        DTR verb-pc19-rule-dtr &
        DTR verb-lex &
            [ INFLECTED #infl ] ].

    verb-neg_lrt-lex-rule := cont-change-only-lex-rule & verb-neg-lex-rule-super &
      [ C-CONT [ HOOK [ XARG #xarg,
                        LTOP #ltop,
                        INDEX #ind ],
                 RELS.LIST < event-relation &
                             [ PRED "neg_rel",
                               LBL #ltop,
                               ARG1 #harg ] >,
                 HCONS.LIST < qeq &
                              [ HARG #harg,
                                LARG #larg ] > ],
        SYNSEM.LKEYS #lkeys,
        DTR.SYNSEM [ LKEYS #lkeys,
                     LOCAL [ CONT.HOOK [ XARG #xarg,
                                         INDEX #ind,
                                         LTOP #larg ],
                             CAT.HEAD verb ] ] ].

Furthermore, we let verb-lex take either nhyp or assertive mood.
    verb-lex := non-mod-lex-item & nhyp-mood-rule-dtr & asrt-mood-rule-dtr ...

As a result, LKB can correctly account for example (1) and rule out example (2).

b)
Nominalization IGTs:
    (3)
    ə́y hén čá-pə =ni
    1P fish eat-NOM =COP
    'I am fish eating (person).'

    (4)
    ə́y hén čá-tə-pə =ni
    1P fish eat-NEG-NOM =COP
    'I am not-eat-fish (person).'

As in (4), since we would like "fish eat-NEG-NOM" as a constituent VP which under a nominalized N, we specify the level of nominalization to attach to VP level that is also reflected to the semantics.

We added the following TDLs to account for -pə construction:
    nom-suffix :=
    %suffix (* -pə)
    nom-lex-rule.

    nom-lex-rule := nominalizer-lex-rule-super & [INFLECTED.SENTENCE-MOOD-FLAG +].

    nominalizer-lex-rule-super := infl-lex-rule & high-or-mid-nominalization-lex-rule &
      [ INFLECTED #infl,
        DTR nominalizer-rule-dtr &
            [ INFLECTED #infl ] ].

    high-or-mid-nominalization-lex-rule := cat-change-with-ccont-lex-rule & same-cont-lex-rule &
      [ SYNSEM.LOCAL [ CONT.HOOK.INDEX event,
                       CAT [ HEAD verb &
                                  [ NMZ +,
                                    MOD #mod ],
                             VAL [ SUBJ #subj,
                                   COMPS #comps,
                                   SPR #spr,
                                   SPEC #spec ],
                             MC #mc,
                             MKG #mkg,
                             HC-LIGHT #hc-light,
                             POSTHEAD #posthead ] ],
        DTR.SYNSEM.LOCAL.CAT [ HEAD.MOD #mod,
                               VAL [ SUBJ #subj,
                                     COMPS #comps,
                                     SPR #spr,
                                     SPEC #spec ],
                               MC #mc,
                               MKG #mkg,
                               HC-LIGHT #hc-light,
                               POSTHEAD #posthead ],
        C-CONT [ RELS.LIST < >,
                 HCONS.LIST < > ] ].

We then defined a mid-nominalized-clause phrase rule in rules.tdl:
    mid-nominalized-clause := mid-nominalized-clause-phrase.

For the mid-nominalization-cp rule, PP can be formed out of nominalization and then attached to the verb to fulfill complement-head rule, we specified CASE to be agn+pat.
To get rid of parses that combine subject and the nominalized phrase, we define SUBJ as empty.
    mid-nominalized-clause-phrase := unary-phrase &
      [ SYNSEM [ LOCAL [ CAT [ HEAD noun &
                                    [ NMZ +, CASE agn+pat ],
                               VAL [ SPR < [ OPT + ] >,
                                     SPEC < >,
                                     COMPS < >,
                                     SUBJ < > ] ],
                         COORD - ],
                 NON-LOCAL #nl ],
        C-CONT [ RELS.LIST < [ PRED "nominalized_rel",
                               LBL #ltop,
                               ARG0 ref-ind & #arg0,
                               ARG1 #arg1 ] >,
                 HCONS.LIST < qeq &
                              [ HARG #arg1,
                                LARG #larg ] >,
                 HOOK [ XARG #xarg,
                        INDEX #arg0,
                        LTOP #ltop ] ],
        ARGS < [ SYNSEM [ NON-LOCAL #nl,
                          LOCAL [ CAT [ HEAD verb &
                                             [ NMZ + ],
                                        VAL [ COMPS < >,
                                              SUBJ < [] >,
                                              SPR < >,
                                              SPEC < > ] ],
                                  CONT.HOOK [ XARG #xarg,
                                              LTOP #larg ],
                                  COORD - ] ] ] > ].

At this point, however, the sentence (3) cannot be parsed because "hén čá-pə" cannot form a VP since COMP-HEAD says SENTENCE-MOOD-FLAG should be na-or-+, while verb-lex says it is SENTENCE-MOOD-FLAG -.

You suggested us to set SENTENCE-MOOD-FLAG to - in nom-lex-rule as follows:
    nom-lex-rule := nominalizer-lex-rule-super & [ INFLECTED.SENTENCE-MOOD-FLAG -  ].

However, nom-lex-rule cannot even take verb-lex as input because of unification failure in SENTENCE-MOOD-FLAG, so we reverted above change.

To solve this problem (maybe not the best way), we defined another verb-mood-satisfied-verb-lex type and instantiated the nominalized verbs in lexicon.tdl:
    čá_mood := verb-mood-satisfied-verb-lex &
      [ STEM < "čá" >,
        SYNSEM.LKEYS.KEYREL.PRED "_eat_v_rel" ].
    ...

The verb-mood-satisfied-verb-lex inherits from the agn-pat-mood-satisfied-transitive-verb-lex, which has SENTENCE-MOOD-FLAG +.

Now, example (3) can be parsed correctly with only one reading.

Then, we started to work on example (4), which is the implementation of adding negative marker before nominalization marker -pə.

We discovered this suffix -tə behaves differently from negative marker -tə in the verbal sentences. -tə in nominalization should attach a mood-satisfied verb and be the input of nominalization marker -pə; -tə in verbal sentences should attach a mood-seeking verb and be the input of a mood marker. Therefore, we defined the following TDLs:
irules.tdl:
    nom-neg_lrt-suffix :=
    %suffix (* -tə)
    nom-neg_lrt-lex-rule.

mni.tdl:
    nom-neg-lex-rule-super := infl-lex-rule &
      [ INFLECTED #infl,
        DTR verb-mood-satisfied-lex &
            [ INFLECTED #infl ] ].

    nom-neg_lrt-lex-rule := cont-change-only-lex-rule & nom-neg-lex-rule-super & nominalizer-rule-dtr &
      [ C-CONT [ HOOK [ XARG #xarg,
                        LTOP #ltop,
                        INDEX #ind ],
                 RELS.LIST < event-relation &
                             [ PRED "neg_rel",
                               LBL #ltop,
                               ARG1 #harg ] >,
                 HCONS.LIST < qeq &
                              [ HARG #harg,
                                LARG #larg ] > ],
        SYNSEM.LKEYS #lkeys,
        DTR.SYNSEM [ LKEYS #lkeys,
                     LOCAL [ CONT.HOOK [ XARG #xarg,
                                         INDEX #ind,
                                         LTOP #larg ],
                             CAT.HEAD verb ] ] ].

Note the DTR of nom-neg-lex-rule-super is verb-mood-satisfied-lex; nom-neg_lrt-lex-rule inherits from nominalizer-rule-dtr. Now, example (4) can be parsed correctly.

c)
Non-verbal negation IGTs:
    (5)
    má oǰa =ni
    3P teacher =COP
    'He/she is a teacher.'
    (6)
    má oǰa =nəttə
    3P teacher =NEGCOP
    'He/she is not a teacher.'
    (7)
    ə́y bəzar=tə =ni
    1P park=LOC =COP
    'I am in the park.'
    (8)
    ə́y bəzar=tə =nəttə
    1P park=LOC =NEGCOP
    'I am not in the park.'

We observed except their MRS, example (6) is syntactically identical with (5), (8) is syntactically identical with (7). Therefore, we first created two instances of ni_neg_cop and noun-neg-cop in lexicon.tdl:

tdl for (8):
    ni_neg_cop := cop-lex &
      [ STEM < "=nəttə" >,
        SYNSEM.LKEYS.KEYREL.PRED "neg_rel" ].

tdl for (6):
    noun-neg-cop := noun-comp-copula-verb-lex &
      [ STEM < "=nəttə" >,
        SYNSEM.LKEYS.KEYREL.PRED "_be_v_id_rel" ].

We encountered two problems here: (1) although we have the "neg_rel" PRED value in ni_neg_cop, LKB shows an empty MRS list. (2) For noun-neg-cop, it seems we cannot add two PRED values here.

You answered our question in Canvas:
    "If you want to add a relation to the RELS list, the verb has to inherit from a type that has a non-empty RELS list. I'm guessing that your cop-lex inherits from subj-raise-aux-no-pred or similar. You need a version that inherits from subj-raise-aux-with-pred. (If you don't already have that type, try defining an auxiliary with a predicate in the customization system to get one.)

     For the noun-neg-cop, you would want to do this, you'll need to define a type that has two things on the RELS list, neg_rel and _be_v_id_rel and an HCONS linking them.

     BUT NOTE: None of this is actually required this week or next."

We are working on this now, so example (6) and (8) can be parsed but the MRS aren't correct yet.


3.
a)
When we tried to translate "The dogs are the cats" from English to Meitei, we get four extra incorrect results with mood marker:
    Húy hə́wdóŋ =ni-í
    Húy hə́wdóŋ=pu =ni-í
    Húy=nə hə́wdóŋ =ni-í
    Húy=nə hə́wdóŋ=pu =ni-í

=ni should not attach to any mood marker here. We noticed our verb-mood-satisfied-lex incorrectly inherits nhyp-mood-rule-dtr.
After removing nhyp-mood-rule-dtr from it, it ruled out above error. Now, it only generates four correct results:
    Húy hə́wdóŋ =ni
    Húy hə́wdóŋ=pu =ni
    Húy=nə hə́wdóŋ =ni
    Húy=nə hə́wdóŋ=pu =ni

b) When translating verbal sentences from English to Meitei, ACE output 0 results every time with "NOTE: terminating search, too much RAM." However, non-verbal sentences (such as the one above) didn't have this problem.

You suggested us to use `echo "sentence you want to test" | ace -g mni.dat | ace -vv -e -g mni.dat` to see what happen. We did discovered there is a nested loop in our rules:
    generated #123 2/2 from #64, #82 for 2 EPs with rule head-spec: húy túm-u-e
    generated #124 2/2 from #65, #82 for 2 EPs with rule subj-head: húy túm-u-e
    generated #125 2/2 from #66, #82 for 2 EPs with rule comp-head: húy túm-u-e
    generated #126 1/2 from #9, #83 for 1 EPs with rule head-spec: túm-u-e
    generated #127 1/2 from #8, #83 for 1 EPs with rule subj-head: túm-u-e
    generated #128 1/2 from #7, #83 for 1 EPs with rule comp-head: túm-u-e
    ...
Specifically, we noticed túm-u-e was a construction that we weren't familiar with. So we went to find what -u means. We found it is in verb-pc19 with following defination:
    verb-pc19_lrt2-suffix :=
    %suffix (* -u)
    verb-pc19_lrt2-lex-rule.

    verb-pc19_lrt2-lex-rule := verb-neg-lex-rule-super &
      [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT ipfv ].

It should not inherit verb-neg-lex-rule-super instead of another super type. For now, we just commented out this morphology to reduce nested loop.



4. A description of the status of each MMT item, with sje as source and with eng as source. Possible statuses:
4.1 Works! (But document how many outputs you get)
Doesn't work, because your language string doesn't parse and/or isn't available.
Doesn't work, because MRSes are different. Indicate how they differ.
Doesn't work, MRSes look the same, not sure what's going on.

ENG:
Dogs sleep -> WORK 4 results, all grammatical
Dogs chase cars -> WORK 12 results, all grammatical
I chase you -> WORK 36 results, all grammatical
Dogs eat -> WORK 6 results, all grammatical
The dogs dont chase cars -> WORK 8 results, all grammatical
I think that you know that dogs chase cars -> WORK, too many results, haven't worked on this yet
I ask whether you know that dogs chase cars -> Doesn't Work, NOTE: EP '"_ask_v_rel"' is unknown in the semantic index
Cats and dogs chase cars -> Doesn't Work, NOTE: EP '"_and_coord_rel"' is unknown in the semantic index (haven't worked on coordination)
Dogs chase cars and cats chase dogs -> Doesn't Work, NOTE: EP '"_and_coord_rel"' is unknown in the semantic index (haven't worked on coordination)
Cats chase dogs and sleep -> Doesn't Work, NOTE: EP '"_and_coord_rel"' is unknown in the semantic index (haven't worked on coordination)
Do cats chase dogs -> WORK, 12 results, but all means "cats chase dogs"
Hungry dogs eat -> Doesn't work, need transfer rule: NOTE: EP '"_hungry_a_rel"' is unknown in the semantic index
Dogs in the park eat -> WORK, 18 results, not sure if they are grammatical since we didn't work on advP yet.
Dogs eat in the park -> WORK, 18 results, same as above
The dogs are hungry -> Doesn't work, need transfer rule: NOTE: EP '"_hungry_a_rel"' is unknown in the semantic index
The dogs are in the park -> Doesn't work. We were about to write a trigger rule to account for this, but because nominalization hindered us this week, we will fix it soon :)
The dogs are the cats -> WORK 4 results, all grammatical
The dog s car sleeps -> Doesn't work, it worked before, maybe we need to fix POSS
My dogs sleep -> WORK 4 results, all grammatical
Who sleeps -> Doesn't work, "wh_q_rel"' is unknown in the semantic index
What do the dogs chase -> Doesn't work, same as above
What do you think the dogs chase -> Doesn't work, same as above
Who asked what the dogs chase -> Doesn't work, same as above
I asked what the dogs chased -> Doesn't work, same as above
The dog sleeps because the cat sleeps -> Doesn't work, "_because_subord_rel"' is unknown in the semantic index
The dog sleeps after the cat sleeps -> Doesn't work, "_after_subord_rel"' is unknown in the semantic index

SJE:
Bednaga urri -> WORK 4 results, all grammatical
Bednaga haoskaoli bijlajd -> WORK 12 results, all grammatical
Maon haoskaolav duv -> WORK 12 results, all grammatical
Bednaga burri -> WORK 12 results, all grammatical
Bednaga eh haoskaolao bijlajd -> WORK 8 results, all grammatical
Maon usjudav att daon dieda att bednaga bijlajd haoskaoli -> WORK too many results
Gaahto ja bednaga bijlajd haoskaoli -> Doesn't Work, NOTE: EP '"_and_coord_rel"' is unknown in the semantic index (haven't worked on coordination)
Bednaga haoskaoli bijlajd ja gaahto haoskaoli bednagajd -> Doesn't Work, same as above
Gaahto haoskaoli bednagajd ja urri -> Doesn't Work, same as above
Gaahto bednagajd haoskaoli -> WORK 12 results, all grammatical
Buojde bednaga burri -> Doesn't work, need transfer rule: NOTE: EP '"_hungry_a_rel"' is unknown in the semantic index
Bednaga bijjla aorraa -> Doesn't work, need trigger rule
Muv bednaga urri -> WORK 4 results, all grammatical
Ge aorraa -> Doesn't work, "wh_q_rel"' is unknown in the semantic index
Mejd bednaga haoskaoli -> Doesn't work, "wh_q_rel"' is unknown in the semantic index
Mejd daon usjuda haoskaoli bednaga -> Doesn't work, "wh_q_rel"' is unknown in the semantic index
Ge gatjadij mejd bednaga haoskaoli -> Doesn't work, "wh_q_rel"' is unknown in the semantic index
Maon gatjadijiv mejd bednaga haoskaolin -> Doesn't work, "wh_q_rel"' is unknown in the semantic index


5. A description of the performance of your final grammar for this week on the test suite and test corpus, as compared to your starting grammar (see details above).
How many items parsed?
  Before improvements:
  	test corpus: 3/1784 items parsed;
  	test suite: 28/41.
  After improvements:
  	test corpus: 15/1784 items parsed;
  	test suite: 33/41 items parsed (with 8 negative sentences).

What is the average number of parses per parsed item?
  Before improvements:
  	test corpus: 1.2 parses on average;
  	test suite: 1.25 parses on average.
  After improvements:
  	test corpus: 1.33 parses on average;
  	test suite: 1.24 parses on average.

How many parses did the most ambiguous item receive?
  Before improvements:
  	test corpus: 2 parses;
  	test suite: 2 parses.
  After improvements:
  	test corpus: 3 parses;
  	test suite: 2 parses;

What NEW sources of ambiguity can you identify?
  For item #11470:
  pəysá ləy-tə-e
  money be-not-ASRT
  '?(it) is not money. / ?No money'
  It has three readings. First is constrcuted with DECL-HEAD-OPT-SUBJ S->VP. The other two are SUBJ-HEAD S -> NP VP. The later two ambiguity comes from multi-definitions of verb ləy in verb12-verb-lex and verb138-verb-lex.

