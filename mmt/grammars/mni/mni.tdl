;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of mni
;;; created at:
;;;     Wed Feb 16 23:11:06 UTC 2022
;;; based on Matrix customization system version of:
;;;     Mon Aug  2 23:22:15 UTC 2021
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

basic-head-comp-phrase :+ [ SYNSEM [ LIGHT -,
             LOCAL.CAT.MC #mc ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

head :+ [ PRON bool,
    AUX bool,
    PRD bool,
    NMZ bool,
    POSSESSOR poss,
    SPEC-INIT bool,
    FORM form ].

noun :+ [ CASE case ].

inflected :+ [ SENTENCE-MOOD-FLAG luk,
                                         NOUN-CASE-FLAG luk ].

infl-satisfied :+ [ SENTENCE-MOOD-FLAG na-or-+,
                                                  NOUN-CASE-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

dp-head-only := basic-unary-phrase & headed-phrase &
  [ HEAD-DTR #head,
    ARGS < #head > ].

basic-bare-dp-phrase := dp-head-only & unary-nonloc-phrase &
  [ SYNSEM [ LOCAL.CAT [ WH #wh,
                       VAL [ SPR < >,
                           SUBJ < >,
                           COMPS < >, SPEC #spec ] ] ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ WH #wh,
                                  HEAD det,
                                  VAL [ SPR < unexpressed &
                                              [ LOCAL.CAT.HEAD +nd,
                                                OPT + ] >,
                                        SUBJ < >,
                                        COMPS < >, SPEC #spec ] ],
                            CONT.HOOK [ INDEX #index,
                                        LTOP #larg ] ],
    C-CONT [ RELS.LIST < quant-relation &
                     [ ARG0 #index,
                       RSTR #harg ] >,
             HCONS.LIST < qeq &
                      [ HARG #harg,
                        LARG #larg ] >,
             ICONS.LIST < >,
             HOOK [ INDEX #index ] ] ].

basic-bare-dp-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ] & [INFL-SATISFIED.NOUN-CASE-FLAG -] .

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
real-case := case.  ; intermediate case type for all real cases
agn+pat := real-case.
agn := agn+pat.
pat := agn+pat.  ; pat
abl := real-case.  ; abl
loc := real-case.  ; loc
poss-case := real-case.
ass := real-case.  ; ass
ins := real-case.  ; inst

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
sg := number.
pl := number.
dual := number.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;; Possession

possessive-pron-1 := possessive.  ; supertype for strategy pron-1
possessor-pron-1 := possessor & possessive-pron-1.
possessum-pron-1 := possessum & possessive-pron-1.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Aspect

pfv := aspect.
prog := aspect.
ipfv := aspect.
pot := aspect.
npot := aspect.

;;; Mood

recip := mood.
opt := mood.
intt := mood.
nhyp-declarative := mood.
asrt := mood.
null := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-non-wh-word-lex & non-local-none-lex-item & noun-determiner-pc-dtr & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ SPR < #spr &
                                   [ LOCAL.CAT.HEAD det ] >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       HEAD.NMZ - ] ].

noun1-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr & noun-possessum-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
                                                INFLECTED.NOUN-CASE-FLAG -  ].

noun2-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr & noun-possessum-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
                                                INFLECTED.NOUN-CASE-FLAG -  ].

noun4-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun6-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun8-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun17-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun29-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun35-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun61-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr & noun-possessum-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
                                                INFLECTED.NOUN-CASE-FLAG -  ].

noun69-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun79-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr & noun-possessum-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
                                                INFLECTED.NOUN-CASE-FLAG -  ].

noun89-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun93-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun95-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun96-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun100-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun110-noun-lex := noun-lex & noun-case-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
                                                INFLECTED.NOUN-CASE-FLAG -  ].

noun111_he_she-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM sg ] ],
                                                       INFLECTED.NOUN-CASE-FLAG -  ].

noun112_I-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ] ],
                                                       INFLECTED.NOUN-CASE-FLAG -  ].

noun114_here-noun-lex := noun-lex & noun-case-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 3rd ],
                                                    INFLECTED.NOUN-CASE-FLAG -  ].

noun115_we-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ] ],
                                                       INFLECTED.NOUN-CASE-FLAG -  ].

noun116_they-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM pl ] ],
                                                       INFLECTED.NOUN-CASE-FLAG -  ].

noun117_you_all-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM pl ] ],
                                                       INFLECTED.NOUN-CASE-FLAG -  ].

noun118_we_dual-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM dual ] ],
                                                         INFLECTED.NOUN-CASE-FLAG -  ].

noun119_you_dual-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM dual ] ],
                                                         INFLECTED.NOUN-CASE-FLAG -  ].

noun120_they_dual-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM dual ] ],
                                                         INFLECTED.NOUN-CASE-FLAG -  ].

noun121-noun-lex := noun-lex & noun-case-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
                                                INFLECTED.NOUN-CASE-FLAG -  ].

noun122-noun-lex := noun-lex & noun-case-rule-dtr & noun-possessor-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM sg ],
                                                   INFLECTED.NOUN-CASE-FLAG -  ].

;;; Verbs

verb-lex := non-mod-lex-item & nominalizer-rule-dtr & nhyp-mood-rule-dtr & asrt-mood-rule-dtr & verb-pc3-rule-dtr &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.HEAD verb &
                            [ NMZ - ] ] ,
                                             INFLECTED.SENTENCE-MOOD-FLAG - ].

main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex & verb-mood-not-satisfied-dtr &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ]].

aux-lex := verb-lex & basic-icons-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD.AUX +,
             L-QUE - ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ] > ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun &
                                [ CASE real-case ] ] ] > ].


clausal-verb-lex := main-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ MC na-or--,
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < > ] ] ] > ].

agn-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE agn ] ].

agn-pat-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE agn ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE pat ] ] > ].

;; mood satisfied verb cat (nominal sentences)
verb-mood-satisfied-lex := non-mod-lex-item & nominalizer-rule-dtr &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.HEAD verb &
                            [ NMZ - ] ] ,
                                             INFLECTED.SENTENCE-MOOD-FLAG + ].

main-mood-satisfied-verb-lex := verb-mood-satisfied-lex & basic-verb-lex & basic-non-wh-word-lex &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ]].

intransitive-mood-satisfied-verb-lex := main-mood-satisfied-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ] > ].

transitive-mood-satisfied-verb-lex := main-mood-satisfied-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun &
                                [ CASE real-case ] ] ] > ].

agn-mood-satisfied-intransitive-verb-lex := intransitive-mood-satisfied-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE agn ] ].

agn-pat-mood-satisfied-transitive-verb-lex := transitive-mood-satisfied-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE agn ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE pat ] ] > ].

clausal-agn-verb-lex := clausal-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE agn ] ].

verb2-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD +vc,
                                                   WH.BOOL - ],
                                             CONT.HOOK.INDEX.SF prop ] ] >,
             NON-LOCAL.QUE.LIST < > ] ].

verb3-verb-lex := clausal-verb-lex & verb-pc1-rule-dtr & verb-pc34-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD +vc ] > ].

verb6-verb-lex := clausal-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD +vc ] > ,
                                                              INFLECTED.SENTENCE-MOOD-FLAG - ].

verb12-verb-lex := agn-pat-transitive-verb-lex.

verb-mood-satisfied-verb-lex := agn-pat-mood-satisfied-transitive-verb-lex.

verb14-verb-lex := clausal-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD +vc ] > ,
                                                               INFLECTED.SENTENCE-MOOD-FLAG - ].

verb22-verb-lex := intransitive-verb-lex.

verb25-verb-lex := intransitive-verb-lex & verb-pc16-rule-dtr.

verb30-verb-lex := agn-pat-transitive-verb-lex.

verb37-verb-lex := intransitive-verb-lex & verb-pc16-rule-dtr & verb-pc30-rule-dtr.

verb40-verb-lex := agn-pat-transitive-verb-lex.

verb42-verb-lex := agn-pat-transitive-verb-lex & verb-pc16-rule-dtr.

verb43-verb-lex := intransitive-verb-lex.

verb47-verb-lex := intransitive-verb-lex.

verb58-verb-lex := intransitive-verb-lex.

verb61-verb-lex := agn-pat-transitive-verb-lex.

verb68-verb-lex := agn-pat-transitive-verb-lex.

verb78-verb-lex := agn-pat-transitive-verb-lex.

verb79-verb-lex := intransitive-verb-lex.

verb89-verb-lex := agn-pat-transitive-verb-lex.

verb98-verb-lex := agn-pat-transitive-verb-lex.

verb104-verb-lex := agn-pat-transitive-verb-lex.

verb106-verb-lex := intransitive-verb-lex.

verb111-verb-lex := intransitive-verb-lex.

verb124-verb-lex := clausal-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD +vc ] > ].

verb127-verb-lex := intransitive-verb-lex.

verb132-verb-lex := agn-intransitive-verb-lex.

verb133-verb-lex := agn-pat-transitive-verb-lex.

verb134-verb-lex := agn-pat-transitive-verb-lex & verb-pc34-rule-dtr.

verb138-verb-lex := clausal-verb-lex & verb-pc1-rule-dtr & verb-pc16-rule-dtr & verb-pc30-rule-dtr & verb-pc34-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD +vc ] > ].

verb156-verb-lex := agn-pat-transitive-verb-lex.

verb-attributive-lex := agn-pat-transitive-verb-lex & verb-attributive-pc-rule-dtr.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj &
                                    [ LOCAL.CAT.HEAD.CASE real-case ] > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb &
                                [ AUX - ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

aux1-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

;;; Copulas

cop-lex := basic-verb-lex-super & trans-first-arg-raising-lex-item-2 & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                   CAT.VAL [ COMPS < [ LOCAL.CAT cat-sat &
                                                 [ HEAD adp & [ PRD + ],
                                                   VAL [ SUBJ < >,
                                                         COMPS < > ] ] ] >,
                             SPEC < >,
                             SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                              CAT cat-sat &
                                                  [ VAL [ SPR < >,
                                                          COMPS < > ],
                                                    HEAD noun &
                                                         [ CASE agn ] ] ] ] > ] ] ].

; Copula type taking adjectival complements.
; Need to define more for additional complement types.

noun-comp-copula-verb-lex := agn-pat-mood-satisfied-transitive-verb-lex.

locative-pp-phrase := unary-phrase &
[ SYNSEM [ NON-LOCAL #nl,
           LOCAL.CAT [ HEAD adp & [ MOD < [ LOCAL intersective-mod &
						  [ CAT.HEAD verb,
						    CONT.HOOK.INDEX #xarg ] ] > ],
		       VAL [ COMPS < >,
			     SUBJ < >,
			     SPEC < >,
			     SPR < > ]]],
  C-CONT [ HOOK [ LTOP #ltop,
		  INDEX #index,
		  XARG #xarg ],
          RELS.LIST < arg12-ev-relation &
		      [ PRED "_loc_p_rel",
			LBL #ltop,
			ARG0 #index,
			ARG1 #xarg,
			ARG2 #dtr ] >,
	   HCONS.LIST < >  ],
          ARGS < [ SYNSEM [ NON-LOCAL #nl,
			    LOCAL [ CAT [ HEAD noun & [CASE loc],
					  VAL.SPR < > ],
				    CONT.HOOK [ INDEX #dtr ] ] ] ] > ].

;; Adposition

;;; Complementizers

complementizer-lex-item := raise-sem-lex-item & non-local-none-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

comps1-complementizer-lex-item := complementizer-lex-item & basic-non-wh-word-lex &
  [ SYNSEM.LOCAL [ CAT [ VAL.COMPS.FIRST.LOCAL.CAT.MC -,
                         MC na-or-- ],
                   CONT.HOOK.INDEX.SF prop ] ].

clause :+ [ SYNSEM.NON-LOCAL.QUE.LIST < > ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-non-wh-word-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

;;; Adverbs

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

high-or-mid-nominalization-lex-rule := cat-change-with-ccont-lex-rule & same-cont-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX event,
                   CAT [ HEAD verb &
                              [ NMZ +,
                                MOD #mod ],
                         VAL [ SUBJ #subj,
                               COMPS #comps,
                               SPR #spr,
                               SPEC #spec ],
                         MC #mc,
                         MKG #mkg,
                         HC-LIGHT #hc-light,
                         POSTHEAD #posthead ] ],
    DTR.SYNSEM.LOCAL.CAT [ HEAD.MOD #mod,
                           VAL [ SUBJ #subj,
                                 COMPS #comps,
                                 SPR #spr,
                                 SPEC #spec ],
                           MC #mc,
                           MKG #mkg,
                           HC-LIGHT #hc-light,
                           POSTHEAD #posthead ],
    C-CONT [ RELS.LIST < >,
             HCONS.LIST < > ],
    INFLECTED.SENTENCE-MOOD-FLAG + ].

;;; Intermediate rule types

verb-pc1-rule-dtr := word-or-lexrule.
verb-mood-not-satisfied-dtr := word-or-lexrule.
verb-attributive-pc-rule-dtr := word-or-lexrule.
verb-neg-rule-dtr := word-or-lexrule.
verb-pc27-rule-dtr := word-or-lexrule.
noun-possessor-pc-rule-dtr := word-or-lexrule.
verb-pc30-rule-dtr := word-or-lexrule.
noun-case-rule-dtr := word-or-lexrule.
verb-pc34-rule-dtr := word-or-lexrule.
verb-pc3-rule-dtr := word-or-lexrule.
noun-possessum-pc-rule-dtr := word-or-lexrule.
nominalizer-rule-dtr := word-or-lexrule.
noun-determiner-pc-dtr := word-or-lexrule.
verb-pc16-rule-dtr := word-or-lexrule.
asrt-mood-rule-dtr := word-or-lexrule.
nhyp-mood-rule-dtr := word-or-lexrule.

;;; Lexical rule types

noun-case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ NOUN-CASE-FLAG +,
                SENTENCE-MOOD-FLAG #sentence-mood ],
    DTR noun-case-rule-dtr &
        [ INFLECTED.SENTENCE-MOOD-FLAG #sentence-mood ] ].

noun-case-null-lex-rule := const-lex-rule & noun-case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE agn+pat ].

noun-case-ablative-lex-rule := infl-lex-rule & noun-case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

noun-case-locative-lex-rule := infl-lex-rule & noun-case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE loc ].

noun-case-associative-lex-rule := infl-lex-rule & noun-case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE ass ].

noun-case-agentive-lex-rule := infl-lex-rule & noun-case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE agn ].

noun-case-patient-lex-rule := infl-lex-rule & noun-case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE pat ].

noun-possessor-pc-lex-rule-super := infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun-possessor-pc-rule-dtr &
        [ INFLECTED #infl ] ].

possessor-lex-rule-1 := head-change-only-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD det &
                          [
                            POSSESSOR possessor-1 ] ].

noun-determiner-pc-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-case-rule-dtr &
  [ DTR noun-determiner-pc-dtr ].

noun-determiner-pc-distance_lrt-lex-rule := noun-determiner-pc-lex-rule-super.

noun-determiner-pc-proximate_lrt-lex-rule := noun-determiner-pc-lex-rule-super.

noun-possessor-pc_lrt1-lex-rule := noun-possessor-pc-lex-rule-super & possessor-lex-rule-1.

noun-possessum-pc-lex-rule-super := infl-lex-rule & noun-case-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-possessum-pc-rule-dtr &
        [ INFLECTED #infl ] ].

noun-possessum-pc_lrt1-lex-rule := noun-possessum-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ HEAD #head,
                       VAL [ SPR < >,
                             SPEC #spec,
                             SUBJ #subj,
                             COMPS #comps ] ],
    C-CONT [ HOOK #hook,
             RELS.LIST < noun-relation &
                         [ PRED "pron_rel",
                           LBL #lbl2,
                           ARG0 #possessor &
                                [ PNG.PER 1st,
                                  COG-ST activ-or-more,
                                  SPECI + ] ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ],
                         arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessor,
                           RSTR #harg2 ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ],
                          qeq &
                          [ HARG #harg2,
                            LARG #lbl2 ] > ],
    DTR.SYNSEM.LOCAL [ CONT.HOOK #hook &
                                 [ INDEX #possessum &
                                         [ COG-ST activ-or-more ],
                                   LTOP #lbl ],
                       CAT [ HEAD #head &
                                  [ PRON - ],
                             VAL [ SPEC #spec,
                                   SUBJ #subj,
                                   COMPS #comps ] ] ] ].

noun-possessum-pc_lrt2-lex-rule := noun-possessum-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ HEAD #head,
                       VAL [ SPR < >,
                             SPEC #spec,
                             SUBJ #subj,
                             COMPS #comps ] ],
    C-CONT [ HOOK #hook,
             RELS.LIST < noun-relation &
                         [ PRED "pron_rel",
                           LBL #lbl2,
                           ARG0 #possessor &
                                [ PNG.PER 2nd,
                                  COG-ST activ-or-more,
                                  SPECI + ] ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ],
                         arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessor,
                           RSTR #harg2 ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ],
                          qeq &
                          [ HARG #harg2,
                            LARG #lbl2 ] > ],
    DTR.SYNSEM.LOCAL [ CONT.HOOK #hook &
                                 [ INDEX #possessum &
                                         [ COG-ST activ-or-more ],
                                   LTOP #lbl ],
                       CAT [ HEAD #head &
                                  [ PRON - ],
                             VAL [ SPEC #spec,
                                   SUBJ #subj,
                                   COMPS #comps ] ] ] ].

noun-possessum-pc_lrt3-lex-rule := noun-possessum-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ HEAD #head,
                       VAL [ SPR < >,
                             SPEC #spec,
                             SUBJ #subj,
                             COMPS #comps ] ],
    C-CONT [ HOOK #hook,
             RELS.LIST < noun-relation &
                         [ PRED "pron_rel",
                           LBL #lbl2,
                           ARG0 #possessor &
                                [ PNG.PER 3rd,
                                  COG-ST activ-or-more,
                                  SPECI + ] ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ],
                         arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessor,
                           RSTR #harg2 ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ],
                          qeq &
                          [ HARG #harg2,
                            LARG #lbl2 ] > ],
    DTR.SYNSEM.LOCAL [ CONT.HOOK #hook &
                                 [ INDEX #possessum &
                                         [ COG-ST activ-or-more ],
                                   LTOP #lbl ],
                       CAT [ HEAD #head &
                                  [ PRON - ],
                             VAL [ SPEC #spec,
                                   SUBJ #subj,
                                   COMPS #comps ] ] ] ].

verb-pc1-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc3-rule-dtr & verb-pc34-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc1-rule-dtr &
        [ INFLECTED #infl ] ].

verb-upward-lex-rule := verb-pc1-lex-rule-super.

verb-downward-lex-rule := verb-pc1-lex-rule-super.

verb-inward-lex-rule := verb-pc1-lex-rule-super.

verb-outward-lex-rule := verb-pc1-lex-rule-super.

verb-pc3-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc3-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc3_lrt1-lex-rule := verb-pc3-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT pfv ].

verb-pc16-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc16-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc16_lrt1-lex-rule := verb-pc16-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT prog ].

verb-pc16_lrt2-lex-rule := verb-pc16-lex-rule-super.

verb-neg-lex-rule-super := infl-lex-rule & asrt-mood-rule-dtr & verb-pc3-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

verb-neg_lrt-lex-rule := cont-change-only-lex-rule & verb-neg-lex-rule-super &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS.LIST < event-relation &
                         [ PRED "neg_rel",
                           LBL #ltop,
                           ARG1 #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #larg ] > ],
    SYNSEM.LKEYS #lkeys,
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ] ].

nom-neg-lex-rule-super := infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-mood-satisfied-lex &
        [ INFLECTED #infl ] ].

nom-neg_lrt-lex-rule := cont-change-only-lex-rule & nom-neg-lex-rule-super & nominalizer-rule-dtr &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS.LIST < event-relation &
                         [ PRED "neg_rel",
                           LBL #ltop,
                           ARG1 #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #larg ] > ],
    SYNSEM.LKEYS #lkeys,
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ] ].

verb-pc19_lrt2-lex-rule := verb-neg-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT ipfv ].

verb-pc27-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc27-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc27_lrt1-lex-rule := verb-pc27-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT pot ].

verb-pc30-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc16-rule-dtr & verb-pc3-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc30-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc30_lrt1-lex-rule := verb-pc30-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD recip ].

verb-pc34-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc34-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc34_lrt1-lex-rule := verb-pc34-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD opt ].

verb-pc42-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb61-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc42_lrt1-lex-rule := verb-pc42-lex-rule-super.

verb-attributive-pc-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-attributive-pc-rule-dtr &
        [ INFLECTED #infl ] ].

verb-attributive-pc_lrt1-lex-rule := verb-attributive-pc-lex-rule-super.

verb-pc70-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb138-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc70_lrt1-lex-rule := verb-pc70-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT npot ].

nominalizer-lex-rule-super := infl-lex-rule & high-or-mid-nominalization-lex-rule &
  [ DTR nominalizer-rule-dtr ].

nom-lex-rule := nominalizer-lex-rule-super & [ INFLECTED.SENTENCE-MOOD-FLAG + ].

mid-nominalized-clause-phrase := unary-phrase &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun &
                                [ NMZ +, CASE agn+pat ],
                           VAL [ SPR < [ OPT + ] >,
                                 SPEC < >,
                                 COMPS < >,
                                 SUBJ < > ] ],
                     COORD - ],
             NON-LOCAL #nl ],
    C-CONT [ RELS.LIST < [ PRED "nominalized_rel",
                           LBL #ltop,
                           ARG0 ref-ind & #arg0,
                           ARG1 #arg1 ] >,
             HCONS.LIST < qeq &
                          [ HARG #arg1,
                            LARG #larg ] >,
             HOOK [ XARG #xarg,
                    INDEX #arg0,
                    LTOP #ltop ] ],
    ARGS < [ SYNSEM [ NON-LOCAL #nl,
                      LOCAL [ CAT [ HEAD verb &
                                         [ NMZ + ],
                                    VAL [ COMPS < >,
                                          SUBJ < [] >,
                                          SPR < >,
                                          SPEC < > ] ],
                              CONT.HOOK [ XARG #xarg,
                                          LTOP #larg ],
                              COORD - ] ] ] > ].

mood-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
                         [ INFLECTED.SENTENCE-MOOD-FLAG +].

nhyp-mood-lex-rule-super := mood-lex-rule-super &
                            [ DTR nhyp-mood-rule-dtr ].

nhyp-lex-rule := nhyp-mood-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD nhyp-declarative ].

asrt-mood-lex-rule-super := mood-lex-rule-super &
    [ DTR asrt-mood-rule-dtr  ].

asrt-lex-rule := asrt-mood-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD asrt ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

non-event-subj-head-phrase := basic-head-subj-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < >,
    HEAD-DTR.SYNSEM [ NON-LOCAL [ QUE.LIST < >,
                                  REL.LIST < > ],
                      LOCAL [ CONT.HOOK.INDEX ref-ind,
                              CAT.VAL.COMPS < > ] ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

possessum-mod-rule := basic-head-mod-phrase-simple &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

adj-head-int-phrase :+ possessum-mod-rule.

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

basic-head-spec-phrase-custom-super := binary-nonloc-phrase & phrasal &
              binary-headed-phrase &
  [ INFLECTED infl-satisfied,
    SYNSEM [ LOCAL.CAT [ WH [ OR < #or1, #or2 > ],
                         VAL [ SUBJ #subj,
                               COMPS #spcomps,
                               SPR #spr,
                               SPEC #spec ],
                         POSTHEAD #ph,
                         HC-LIGHT - ],
              MODIFIED #modif ],
    HEAD-DTR [ INFLECTED infl-satisfied,
               SYNSEM [ LOCAL [ CAT [ WH #or1,
                                      VAL [ SUBJ #subj,
                                            COMPS olist & #comps,
                                            SPR < #synsem &
                                                  canonical-synsem . #spr >,
                                            SPEC #spec ],
                                      POSTHEAD #ph ],
                                CONT.HOOK #hdhook ],
                        MODIFIED #hmodif ] ],
    NON-HEAD-DTR.SYNSEM #synsem &
     [ LOCAL [ CAT [ WH #or2, VAL [ SPEC < [ LOCAL [ CAT [
                                                  VAL.COMPS #comps ],
                                            CONT.HOOK #hdhook ],
                                    MODIFIED #hmodif ] >,
                           COMPS #spcomps ] ] ],
       MODIFIED #modif ],
    C-CONT [ RELS.LIST < >, HCONS.LIST < >, ICONS.LIST < > ] ].

head-spec-phrase := basic-head-spec-phrase-super & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT [ VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] >,
                                    HEAD.SPEC-INIT - ] ].

head-spec-phrase-2 := head-final & basic-head-spec-phrase-custom-super &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT +,
                                    VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] > ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

poss-unary-phrase := basic-unary-phrase &
  [ SYNSEM [ NON-LOCAL #nonloc,
             LOCAL [ CONT.HOOK #hook,
                     CAT [ HEAD det &
                                [ POSSESSOR possessor ],
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < >,
                                 SPEC < [ LOCAL [ CAT [ VAL.COMPS < >,
                                                        HEAD det &
                                                             [ PRON - ] ],
                                                  CONT.HOOK #hook &
                                                            [ INDEX #possessum &
                                                                    [ COG-ST uniq-id ],
                                                              LTOP #lbl ] ] ] > ] ] ] ],
    C-CONT [ RELS.LIST < arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ] >,
             ICONS.LIST < > ],
    ARGS < [ SYNSEM [ LOCAL [ CAT [ VAL [
                                          COMPS < >,
                                          SUBJ < >,
                                          SPEC < > ],
                                    HEAD det ],
                              CONT.HOOK.INDEX #possessor ],
                      NON-LOCAL #nonloc ] ] > ] .

poss-unary-phrase-1 := poss-unary-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT.HEAD.POSSESSOR possessor-1 ] >,
    SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT +,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM nonpossessive ] ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

bare-dp-phrase := basic-bare-dp-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

basic-filler-phrase :+ [ SYNSEM.NON-LOCAL.SLASH.LIST < >,
    ARGS < [ SYNSEM [ LOCAL #slash,
                      NON-LOCAL.SLASH.LIST < > ] ],
           [ SYNSEM.NON-LOCAL.SLASH.LIST < #slash > ] > ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

;;; Wh-question-related phrasal types
