lab7 write-up
By Tongxi(Tom) Liu, Jessie Zeng
Feb 16th, 2022
====================
COP Intro:
1. pg.249 copula: The copula -ni which indicates a declarative sentence has a special status in
that it has a category-changing function.  the copula derives verbs from nouns.

pg.86 adjectives: An adjective is derived through the affixation of the attributive derivational
prefix ə́- to a verbal noun. For example, the adjective acawba 'big' is derived
from the stative verb čaw 'be big': thus, ə́-čaw-pə mí  'big man' where mí is
'man'.

====================
Stative Verb as an ADJ, it behaves as an intransitive verb with can take mood markers such as -í as suffixes.
Therefore, we define them as verb-attributive-lex which inherits from agn-intransitive-verb-lex.

We also defined a verb-attributive-pc and didn't add features to it yet.

Semantic is _be+happy_v_rel. You indicate we need a transfer rule.

TDL:

verb-attributive-lex := agn-intransitive-verb-lex & verb-attributive-pc-rule-dtr.
verb-attributive-pc-rule-dtr := word-or-lexrule.
verb-attributive-pc-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-attributive-pc-rule-dtr &
        [ INFLECTED #infl ] ].

verb-attributive-pc_lrt1-lex-rule := verb-attributive-pc-lex-rule-super.


# 24
Source: {a: 79, b: 218, author}
Vetted: t
Judgment: g
Phenomena: {}
ə́y nuŋŋayí
ə́y nuŋŋay-í
1P happy-NHYP
'I am happy.'

=============

Dogs are cars. -> mni

=ni == transitive verb / mood already satisfied
=ni ->
noun-cop := noun-comp-copula-verb-lex &
  [ STEM < "=ni" >,
    SYNSEM.LKEYS.KEYREL.PRED "_be_v_id_rel" ].

noun-comp-copula-verb-lex -> agn-pat-transitive-mood-satisfied-verb-lex. -> transitive-mood-satisfied-verb-lex -> main-verb-mood-satisfied-lex

Normal verbs: mood not satisfied:
    main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex & verb-mood-not-satisfied-dtr &
      [ SYNSEM [ L-QUE -,
                 LOCAL [ CAT [ HEAD.AUX -,
                               VAL [ SPEC < >,
                                     SUBJ < #subj > ] ],
                         CONT.HOOK.XARG #xarg ] ],
        ARG-ST.FIRST #subj &
                     [ LOCAL [ CAT cat-sat &
                                   [ VAL [ SPR < >,
                                           COMPS < > ] ],
                               CONT.HOOK.INDEX #xarg ] ],
        INFLECTED.SENTENCE-MOOD-FLAG - ].

Enclitics typed verbs: mood already satisfied
main-verb-mood-satisfied-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex & verb-pc27-rule-dtr &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED.SENTENCE-MOOD-FLAG + ].


--> no more -í, because -í is in nhyp-lex-rule, which provide mood (while our main-verb-mood-satisfied-lex takes no mood)
nhyp-lex-rule := sentence-mood-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD nhyp-declarative ].

> 36 results

72 results:

Húy garí =ni
Húy-čhí garí =ni-í
Húy garí=pu =ni
Húy garí =ni-í
Húy=nə garí =ni
Húy-tú garí =ni
Húy garí=pu =ni-í
Húy-tú garí=pu =ni
Húy garí-tú =ni-í
Húy garí-tú =ni
Húy garí-čhí =ni-í
Húy garí-tú=pu =ni
Húy garí-tú=pu =ni-í
Húy garí-čhí=pu =ni
Húy garí-čhí=pu =ni-í
Húy garí-čhí =ni
Húy-čhí garí =ni
Húy-tú garí =ni-í
Húy-tú=nə garí =ni
Húy-čhí garí=pu =ni-í
Húy=nə garí=pu =ni
Húy-čhí garí-tú =ni-í
Húy=nə garí-tú =ni
Húy-čhí garí-čhí =ni-í
Húy=nə garí-tú=pu =ni
Húy-čhí garí-tú=pu =ni-í
Húy-čhí garí=pu =ni
Húy-čhí garí-tú =ni
Húy=nə garí-čhí=pu =ni
Húy-čhí garí-tú=pu =ni
Húy=nə garí-čhí =ni
Húy-čhí garí-čhí=pu =ni
Húy=nə garí =ni-í
Húy-čhí=nə garí =ni
Húy-čhí garí-čhí =ni
Húy=nə garí=pu =ni-í
Húy=nə garí-tú =ni-í
Húy-čhí garí-čhí=pu =ni-í
Húy-tú garí=pu =ni-í
Húy-tú=nə garí=pu =ni
Húy-čhí=nə garí=pu =ni
Húy-tú=nə garí-tú =ni
Húy-tú garí-tú =ni-í
Húy-tú=nə garí =ni-í
Húy-tú=nə garí-tú=pu =ni
Húy-čhí=nə garí =ni-í
Húy-tú garí-tú =ni
Húy-tú garí-tú=pu =ni
Húy-tú=nə garí=pu =ni-í
Húy-tú=nə garí-tú =ni-í
Húy=nə garí-čhí =ni-í
Húy-tú=nə garí-čhí=pu =ni
Húy-tú garí-čhí =ni-í
Húy-čhí=nə garí=pu =ni-í
Húy-tú garí-čhí=pu =ni
Húy-čhí=nə garí-tú =ni-í
Húy-tú=nə garí-čhí =ni
Húy-tú garí-tú=pu =ni-í
Húy-čhí=nə garí-tú =ni
Húy-čhí=nə garí-tú=pu =ni
Húy-tú garí-čhí=pu =ni-í
Húy=nə garí-tú=pu =ni-í
Húy-čhí=nə garí-čhí=pu =ni
Húy-tú=nə garí-čhí =ni-í
Húy-tú garí-čhí =ni
Húy-čhí=nə garí-čhí =ni-í
Húy=nə garí-čhí=pu =ni-í

====================
ə́y bəzar=tə =ni
1P park=LOC =COP
'I am in the park.'


To account for non-verbal PP, we first need to build a N node above bəzar=tə which contains the CASE loc value. To achieve this goal,
we defined the following TDLs:

In irules.tdl:
noun-case-locative-suffix :=
%suffix (* =tə)
noun-case-locative-lex-rule.

In mni.tdl:
noun-case-locative-lex-rule := noun-case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE loc ].

Then, we need to build a non-branching phrase structure rule that builds a PP out of the locative case NP.
In rules.tdl:
    loc-pp := locative-pp-phrase.

In mni.tdl:
    locative-pp-phrase := unary-phrase &
    [ SYNSEM [ NON-LOCAL #nl,
               LOCAL.CAT [ HEAD adp & [ MOD < [ LOCAL intersective-mod &
        [ CAT.HEAD verb,
                                                              CONT.HOOK.INDEX #xarg ] ] > ],
                          VAL [ COMPS < >,
                            SUBJ < >,
                            SPR < > ]]],
            C-CONT [ HOOK [ LTOP #ltop,
                    INDEX #index,
                    XARG #xarg ],
              RELS.LIST < arg12-ev-relation &
                   [ PRED "_in_p_rel",
                     LBL #ltop,
                     ARG0 #index,
                     ARG1 #xarg,
                     ARG2 #dtr ] >,
                 HCONS.LIST < >  ],
              ARGS < [ SYNSEM [ NON-LOCAL #nl,
                            LOCAL [ CAT [ HEAD noun & [CASE loc],
                                          VAL.SPR < > ],
                                CONT.HOOK [ INDEX #dtr ] ] ] ] > ].

Noticeably, =ni here behaves differently compared to =ni in the previous seciton, where =ni is type of noun-comp-copula-verb-lex.
=ni in non-verbal PP belongs to cop-lex as defined below:

In lexicon.tdl, we assign
    ni_cop := cop-lex &
     [ STEM < "=ni" > ].

In mni.tdl:
    cop-lex := basic-verb-lex-super & trans-first-arg-raising-lex-item-2 & non-mod-lex-item &
      [ SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                       CAT.VAL [ COMPS < [ LOCAL.CAT cat-sat &
                                                     [ HEAD adp & [ PRD + ],
                                                       VAL [ SUBJ < >,
                                                             COMPS < > ] ] ] >,
                                 SPEC < >,
                                 SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                                  CAT cat-sat &
                                                      [ VAL [ SPR < >,
                                                              COMPS < > ],
                                                        HEAD noun &
                                                             [ CASE agn ] ] ] ] > ] ] ].

Problem:
The subject NP "ə́y" had an incorrect mother PP out of its NP, because the CASE PC was optional before, so that anyone
without specified CASE value can be any CASE. Grammatically, the subject here can have CASE agn with either null suffix of =nə. Therefore,
we modified the CASE definition in our mni.tdl:
    case := *top*.
    real-case := case.
    agn+pat := real-case.
    agn := agn+pat.
    pat := agn+pat.
    abl := real-case.
    loc := real-case.
    ass := real-case.
    ins := real-case.

We must make noun-case-lex-rule-super obligatory for all nouns. To achieve this, we added the NOUN-CASE-FLAG in mni.tdl:
    inflected :+ [ SENTENCE-MOOD-FLAG luk,
                   NOUN-CASE-FLAG luk  ].

    infl-satisfied :+ [ SENTENCE-MOOD-FLAG na-or-+,
                        NOUN-CASE-FLAG na-or-+  ].

Then, we modified the noun-case-lex-rule-super to say it can satisfy NOUN-CASE-FLAG, and noun-lex to say it requires NOUN-CASE-FLAG:
    noun-case-lex-rule-super := add-only-no-ccont-rule &
      [ INFLECTED [ NOUN-CASE-FLAG +,
                    SENTENCE-MOOD-FLAG #sentence-mood ],
        DTR noun-case-rule-dtr &
            [ INFLECTED.SENTENCE-MOOD-FLAG #sentence-mood ] ].

    noun1-noun-lex := noun-lex & noun-case-rule-dtr &
      [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
        INFLECTED.NOUN-CASE-FLAG -  ].


    noun2-noun-lex := noun-lex & noun-case-rule-dtr &
      [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
        INFLECTED.NOUN-CASE-FLAG -  ].
    ......

We introduces noun-case-null-lex-rule which inherits noun-case-lex-rule-super to specify the CASE agn+pat:
noun-case-null-lex-rule := const-lex-rule & noun-case-lex-rule-super &
                [ SYNSEM.LOCAL.CAT.HEAD.CASE agn+pat ].

And add corresponding irule:
    noun-case-null-suffix :=
    %suffix (* )
    noun-case-null-lex-rule.

Eventually, it can rule out......